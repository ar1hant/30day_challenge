#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
public:
	bool isPossible(int N, vector<pair<int, int>>& prerequisites) {
	    int count = 0;
        vector<int> vis(N, 0);
	    vector<int> adj[N];
	    queue<int> q;
	    for(pair<int, int> pr : prerequisites)
            adj[pr.first].push_back(pr.second);
            
        for(int i = 0;i < N;i++)
            for(int ele : adj[i])
                vis[ele]++;
        
        for(int i = 0;i < N;i++)
            if(!vis[i])
                q.push(i);
        
        while(!q.empty()){
            int temp = q.front();
            q.pop();
            for(int ele : adj[temp]){
                vis[ele]--;
                if(!vis[ele])
                    q.push(ele);
            }
            count++;
        }
        return (count == N);
	}
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
    	int N, P;
        vector<pair<int, int> > prerequisites;
        cin >> N;
        cin >> P;
        for (int i = 0; i < P; ++i) {
            int x, y;
            cin >> x >> y;
            prerequisites.push_back(make_pair(x, y));
        }
        // string s;
        // cin>>s;
        Solution ob;
        if (ob.isPossible(N, prerequisites))
            cout << "Yes";
        else
            cout << "No";
        cout << endl;
	}
	return 0;
}  // } Driver Code Ends
