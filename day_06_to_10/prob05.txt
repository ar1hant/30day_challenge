// Initial Template for C++

#include <bits/stdc++.h>

using namespace std;

void solve(vector<vector<string>> &res, int i, string s){
    vector<string> temp;
    for(int j = 0;j < res.back().size();j++){
        if(res.back()[j][i] == s[i])
            temp.push_back(res.back()[j]);
    }
    if(!temp.size())
        temp.push_back("0");
    res.push_back(temp);
}

class Solution{
public:
    vector<vector<string>> displayContacts(int n, string a[], string s)
    {
        set<string> Set(a, a + n);
        vector<string> contact(Set.begin(), Set.end());
        vector<vector<string>> res;
        vector<string>temp;

        for(int j = 0;j < contact.size();j++){
            if(contact[j][0] == s[0])
                temp.push_back(contact[j]);
        }
        if(!temp.size())
            temp.push_back("0");
        res.push_back(temp);

        for(int i = 1;i < s.length();i++){
            solve(res, i, s);
        }

        return res;
    }
};

// Time compleity of this program O(n * log(n) + n * |s|)
// Extra Space compleity of this program O(n * max(Contact[i]))

int main(){
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        string contact[n], s;
        for(int i = 0;i < n;i++)
            cin>>contact[i];
        cin>>s;
        
        Solution ob;
        vector<vector<string>> ans = ob.displayContacts(n, contact, s);
        for(int i = 0;i < s.size();i++){
            for(auto u: ans[i])
                cout<<u<<" ";
            cout<<"\n";
        }
    }
    return 0;
}