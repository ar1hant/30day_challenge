class Solution {
public:
    int maxDistance(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        queue<pair<int, int>> q;
        vector<vector<int>> dp(n, vector<int> (m , 1e6));
        int land = 0, water = 0;
        for(int i = 0;i < n;i++){
            for(int j = 0;j < m;j++){
                if(grid[i][j]){
                    dp[i][j] = 0;
                    q.push({i, j});
                    land++;
                }
                else
                    water++;
            }
        }
        if(land == 0 || water == 0)
            return -1;
        int maxd = -1;
        int dx[4]={-1,1,0,0};
        int dy[4]={0,0,1,-1};
        while(!q.empty()){
            pair<int, int> cur = q.front();
            q.pop();
            int a = cur.first;
            int b = cur.second;
            for(int i = 0;i < 4;i++){
                int x = a + dx[i];
                int y = b + dy[i];
                if(x < 0 || y < 0 || x >= n || y >= m || dp[x][y] <= dp[a][b] + 1)
                    continue;
                dp[x][y] = dp[a][b] + 1;
                q.push({x, y});
            }
        }
        for(vector<int> v : dp)
            for(int x : v)
                if(x != 1e6)
                    maxd = max(maxd, x);
        return maxd;
    }
};
