#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends

void dfs(vector<vector<char>> &board, vector<vector<bool>> &visited, int i, int j, string s, int n, int m, int &l){
    if(!s.length()){
        l++;
        return;
    }
    
    if(i < 0 || j < 0 || i >= n || j >= m || visited[i][j] || s[0] != board[i][j])
        return;
    
    
    visited[i][j] = 1;
    string t = s.substr(1);
    
    dfs(board, visited,i, j - 1, t, n, m, l);
    dfs(board, visited,i - 1, j, t, n, m, l);
    dfs(board, visited,i, j + 1, t, n, m, l);
    dfs(board, visited,i + 1, j, t, n, m, l);
    
    visited[i][j] = 0;
}

class Solution {
public:
    bool isWordExist(vector<vector<char>>& board, string word) {
        int n = board.size();
        int m = board[0].size();
        int l;
        vector<vector<bool>> visited(n, vector<bool>(m, 0));
        for(int i = 0;i < n;i++){
            for(int j = 0;j < m;j++){
                l = 0;
                if(board[i][j] == word[0])
                    dfs(board, visited, i, j, word, n, m, l);
                if(l)
                    return 1;
            }
        }
        return 0;
    }
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n, m;
		cin >> n >> m;
		vector<vector<char>>board(n, vector<char>(m, '*'));
		for(int i = 0; i < n; i++)
			for(int j = 0; j < m; j++)
				cin >> board[i][j];
		string word;
		cin >> word;
		Solution obj;
		bool ans = obj.isWordExist(board, word);
		if(ans)
			cout << "1\n";
		else cout << "0\n";
	}
	return 0;
}  // } Driver Code Ends
